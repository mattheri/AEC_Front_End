{"version":3,"sources":["assets/home-cta.png","components/Header.js","components/Navbar.js","components/Input.js","components/LinkGetter.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Container","as","fluid","className","Row","Col","xs","lg","Image","src","ctaImage","Navbar","Nav","Link","href","target","Input","props","Form","Control","placeholder","onChange","e","value","currentTarget","LinkGetter","React","useState","link","rebrandly","setLink","handleClick","a","fetch","process","method","headers","body","JSON","stringify","destination","response","ok","json","shortUrl","prev","Object","assign","Error","console","log","Button","onClick","preventDefault","role","variant","length","Fragment","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,sC,kMCO9BC,EAAS,WAClB,OACI,kBAACC,EAAA,EAAD,CAAWC,GAAG,SAASC,OAAK,EAACC,UAAU,QACnC,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGJ,UAAU,6BAC1B,kBAACH,EAAA,EAAD,KACI,kBAACA,EAAA,EAAD,CAAWG,UAAU,yCACjB,wBAAIA,UAAU,eAAd,4BACA,uBAAGA,UAAU,SAAb,+BAIZ,kBAACE,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GACb,kBAACP,EAAA,EAAD,KACI,kBAACQ,EAAA,EAAD,CAAOC,IAAKC,IAAUR,OAAK,S,QClBlCS,EAAS,WAClB,OACI,kBAACC,EAAA,EAAD,CAAKT,UAAU,wCACX,kBAACS,EAAA,EAAIC,KAAL,CAAUC,KAAK,wCAAwCC,OAAO,UAA9D,OACA,kBAACH,EAAA,EAAIC,KAAL,CAAUC,KAAK,yBAAyBC,OAAO,UAA/C,U,gDCJCC,EAAQ,SAACC,GAOlB,OACI,kBAACC,EAAA,EAAKC,QAAN,CAAcC,YAAY,uBAAuBC,SANhC,SAACC,GAClB,IAAMC,EAAQD,EAAEE,cAAcD,MAC9BN,EAAMI,SAASE,IAI0DA,MAAON,EAAMM,SCLjFE,EAAa,WAAO,IAAD,EAEJC,IAAMC,SAAS,CACnCC,KAAM,GACNC,UAAW,KAJa,mBAErBD,EAFqB,KAEfE,EAFe,KAYtBC,EAAW,uCAAG,8BAAAC,EAAA,+EAEWC,MAAM,GAAD,OAAIC,wCAAJ,OAAiCA,gCAAjC,SAAmE,CAC3FC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,OAAS,GAAT,OAAaF,qCAEjBG,KAAMC,KAAKC,UAAU,CAACC,YAAaZ,EAAKA,SARhC,YAENa,EAFM,QAWCC,GAXD,iCAYWD,EAASE,OAZpB,cAYFA,EAZE,OAaRf,EAAKC,UAAYc,EAAKC,SACtBd,GAAQ,SAAAe,GAAI,OAAKC,OAAOC,OAAO,GAAIF,EAAMjB,MAdjC,kBAeDe,GAfC,cAkBN,IAAIK,MAAM,kBAlBJ,kCAoBZC,QAAQC,IAAR,MApBY,0DAAH,qDAwBjB,OACI,kBAAClD,EAAA,EAAD,CAAWE,OAAK,EAACC,UAAU,oBACvB,kBAACH,EAAA,EAAD,CAAWG,UAAU,QACrB,kBAACe,EAAA,EAAD,KACI,kBAAC,EAAD,CAAOG,SAjCE,SAACE,GAClBK,EAAKA,KAAOL,EACZO,GAAQ,SAAAe,GAAI,OAAKC,OAAOC,OAAO,GAAIF,EAAMjB,SAgCjC,kBAACuB,EAAA,EAAD,CAAQC,QAAS,SAAC9B,GACdA,EAAE+B,iBACFtB,KACDuB,KAAK,IAAIC,QAAQ,OAAOpD,UAAU,oCAHrC,cAMJ,kBAACH,EAAA,EAAD,KACK4B,EAAKC,UAAU2B,OAAS,GACrB,kBAAC,IAAMC,SAAP,KACI,wBAAItD,UAAU,oCAAd,aACA,uBAAGA,UAAU,oCAAoCyB,EAAKC,eC1C/D6B,MAVf,WACE,OACE,yBAAKvD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.753a53fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/home-cta.79211ae2.png\";","import React from 'react';\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport ctaImage from \"../assets/home-cta.png\";\r\n\r\nexport const Header = () => {\r\n    return(\r\n        <Container as=\"header\" fluid className=\"py-5\">\r\n            <Row>\r\n            <Col xs={12} lg={6} className=\"d-flex align-items-center\">\r\n                <Container>\r\n                    <Container className=\"d-flex align-items-center flex-column\">\r\n                        <h1 className=\"header-text\">Your Brand on Your Links</h1>\r\n                        <p className=\"pr-10\">Id ad anim ex consequat.</p>\r\n                    </Container>\r\n                </Container>\r\n            </Col>\r\n            <Col xs={12} lg={6}>\r\n                <Container>\r\n                    <Image src={ctaImage} fluid />\r\n                </Container>\r\n            </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Nav from \"react-bootstrap/Nav\";\r\n\r\nexport const Navbar = () => {\r\n    return(\r\n        <Nav className=\"justify-content-center py-2 bg-light\">\r\n            <Nav.Link href=\"https://developers.rebrandly.com/docs\" target=\"_blank\">API</Nav.Link>\r\n            <Nav.Link href=\"https://rebrandly.com/\" target=\"_blank\">Home</Nav.Link>\r\n        </Nav>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nexport const Input = (props) => {\r\n\r\n    const handleChange = (e) => {\r\n        const value = e.currentTarget.value;\r\n        props.onChange(value);\r\n    }\r\n\r\n    return(\r\n        <Form.Control placeholder=\"Enter your link here\" onChange={handleChange} value={props.value} />\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { Input } from './Input';\r\n\r\nexport const LinkGetter = () => {\r\n\r\n    const [link, setLink] = React.useState({\r\n        link: \"\",\r\n        rebrandly: \"\"\r\n    });\r\n\r\n    const handleChange = (value) => {\r\n        link.link = value;\r\n        setLink(prev => (Object.assign({}, prev, link)));\r\n    };\r\n\r\n    const handleClick = async () => {\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_CORS}${process.env.REACT_APP_URL}links`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'apikey': `${process.env.REACT_APP_API_KEY}`\r\n                },\r\n                body: JSON.stringify({destination: link.link})\r\n            });\r\n\r\n            if (response.ok) {\r\n                const json = await response.json();\r\n                link.rebrandly = json.shortUrl;\r\n                setLink(prev => (Object.assign({}, prev, link)));\r\n                return json;\r\n            }\r\n\r\n            throw new Error(\"Request Failed\");\r\n        } catch(e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n \r\n    return(\r\n        <Container fluid className=\"bg-primary h-100\">\r\n            <Container className=\"pt-5\">\r\n            <Form>\r\n                <Input onChange={handleChange} />\r\n                <Button onClick={(e) => {\r\n                    e.preventDefault();\r\n                    handleClick();\r\n                }} role=\"a\" variant=\"link\" className=\"text-white font-weight-bold mt-3\">Get Link</Button>\r\n            </Form>\r\n            </Container>\r\n            <Container>\r\n                {link.rebrandly.length > 0 && \r\n                    <React.Fragment>\r\n                        <h3 className=\"text-white font-weight-bold mt-3\">Your link</h3>\r\n                        <p className=\"text-white font-weight-bold mt-3\">{link.rebrandly}</p>\r\n                    </React.Fragment>}\r\n            </Container>\r\n        </Container>\r\n    );\r\n}\r\n","import React from 'react';\nimport { Header } from './Header';\nimport { Navbar } from './Navbar';\nimport { LinkGetter } from './LinkGetter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Header />\n      <LinkGetter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}