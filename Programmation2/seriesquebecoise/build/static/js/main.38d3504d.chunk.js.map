{"version":3,"sources":["assets/images/serieNoire.jpg","assets/images/district31.jpg","assets/images/planB.jpg","assets/images/planBS2.jpg","assets/images/19-2.jpg","assets/images/dugpdcv.jpg","component/TvShowRow/TvShowRow.tsx","component/TvShow/TvShow.tsx","component/Nav/Nav.tsx","component/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","TvShowRow","props","children","category","Row","className","Container","fluid","TvShow","url","title","onClick","Col","xs","Image","src","alt","NavBar","Navbar","bg","expand","Brand","Nav","Link","href","App","React","useState","store","seriesName","seriesImageUrl","district31","serieNoire","planB","planBS2","dixNeufDeux","dugpdcv","series","setSeries","handleAddToList","e","persist","source","currentTarget","parentElement","nextElementSibling","getAttribute","isAlreadyAdded","filter","serie","newState","myList","classList","contains","length","alert","push","splice","findIndex","s","a","addToMyList","state","Object","assign","rows","map","i","x","y","key","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.38d3504d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/serieNoire.8104c48b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/district31.f69f37e6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/planB.eaaf49c5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/planBS2.a21bf770.jpg\";","module.exports = __webpack_public_path__ + \"static/media/19-2.532147e8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dugpdcv.b4da43db.jpg\";","import React from \"react\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nexport const TvShowRow = (props: { children: Array<JSX.Element> | JSX.Element, category: string }) => {\r\n    \r\n    const { children, category } = props;\r\n\r\n    return (\r\n        <Row className=\"tvshow-row\">\r\n            <Container fluid>\r\n                <Row>\r\n                    <h1 className=\"px py\">{category}</h1>\r\n                </Row>\r\n                <Row className=\"py\">\r\n                    {children}\r\n                </Row>\r\n            </Container>\r\n        </Row>\r\n    );\r\n}","import React from \"react\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\ninterface TvShowProps {\r\n    url: string;\r\n    title: string;\r\n    onClick: (e: React.MouseEvent) => void;\r\n}\r\n\r\nexport const TvShow = (props: TvShowProps) => {\r\n\r\n    const { url, title, onClick } = props;\r\n\r\n    return (\r\n        <Col xs={2} className=\"tv-show\">\r\n            <Container className=\"text-center\">\r\n                <div className=\"image-overlay\">\r\n                    <button onClick={onClick} className=\"btn add\">+</button>\r\n                    <button onClick={onClick} className=\"btn remove\">-</button>\r\n                </div>\r\n                <Image\r\n                     src={url} alt={title} fluid />\r\n                <h3>{title}</h3>\r\n            </Container>\r\n        </Col>\r\n    );\r\n};","import React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n\r\nexport const NavBar = () => {\r\n\r\n    return (\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n            <Navbar.Brand>Becflix</Navbar.Brand>\r\n            <Nav>\r\n                <Nav.Link href=\"#\">Plus populaire</Nav.Link>\r\n                <Nav.Link href=\"#\">Suspense</Nav.Link>\r\n                <Nav.Link href=\"#\">Comédie</Nav.Link>\r\n                <Nav.Link href=\"#\">Ma liste</Nav.Link>\r\n            </Nav>\r\n        </Navbar>\r\n    );\r\n};","import React from 'react';\nimport { TvShowRow } from \"../TvShowRow/TvShowRow\";\nimport Container from \"react-bootstrap/Container\";\nimport { TvShow } from '../TvShow/TvShow';\nimport district31 from \"../../assets/images/district31.jpg\";\nimport serieNoire from \"../../assets/images/serieNoire.jpg\";\nimport planB from \"../../assets/images/planB.jpg\";\nimport planBS2 from \"../../assets/images/planBS2.jpg\";\nimport dixNeufDeux from \"../../assets/images/19-2.jpg\";\nimport dugpdcv from \"../../assets/images/dugpdcv.jpg\";\nimport { NavBar } from '../Nav/Nav';\n\ninterface Series {\n  category: string;\n  seriesName: Array<string>;\n  seriesImageUrl: Array<string>;\n}\n\ninterface SeriesStore {\n  store: Array<Series>;\n}\n\nconst App: React.FC = () => {\n\n  const [series, setSeries] = React.useState<SeriesStore>({\n    store: [\n      {\n        category: \"Most Popular\",\n        seriesName: [\n          \"District 31\",\n          \"Série Noire\",\n          \"Plan B saison 1\",\n          \"Plan B saison 2\",\n          \"19-2\",\n          \"Dans une galaxie près de chez vous\"\n        ],\n        seriesImageUrl: [\n          district31,\n          serieNoire,\n          planB,\n          planBS2,\n          dixNeufDeux,\n          dugpdcv\n        ]\n      },\n      {\n        category: \"Suspense\",\n        seriesName: [\n          \"District 31\",\n          \"Série Noire\",\n          \"Plan B saison 1\",\n          \"Plan B saison 2\",\n          \"19-2\"\n        ],\n        seriesImageUrl: [\n          district31,\n          serieNoire,\n          planB,\n          planBS2,\n          dixNeufDeux\n        ]\n      },\n      {\n        category: \"Comédie\",\n        seriesName: [\n          \"Série Noire\",\n          \"Dans une galaxie près de chez vous\"\n        ],\n        seriesImageUrl: [\n          serieNoire,\n          dugpdcv\n        ]\n      },\n      {\n        category: \"Ma Liste\",\n        seriesName: [],\n        seriesImageUrl: []\n      }\n    ]\n  });\n\n  const handleAddToList = (e: React.MouseEvent) => {\n    e.persist();\n    const source = e.currentTarget.parentElement?.nextElementSibling?.getAttribute(\"src\");\n    const alt = e.currentTarget.parentElement?.nextElementSibling?.getAttribute(\"alt\");\n    const isAlreadyAdded = series.store\n      .filter(serie => serie.category === \"Ma Liste\")[0]\n      .seriesImageUrl.filter(url => url === source);\n\n    function addToMyList() {\n\n      const myList = series.store.filter(serie => serie.category === \"Ma Liste\")[0];\n\n      if (e.currentTarget.classList.contains(\"add\")) {\n        if (isAlreadyAdded.length) {\n          alert(\"Cannot add this serie as it is already in your list.\");\n          return;\n        };\n        myList.seriesImageUrl.push(source ? source : \"\");\n        myList.seriesName.push(alt ? alt : \"\");          \n      } else {\n        if (!isAlreadyAdded.length) {\n          alert(\"Cannot remove this series from your list, it is not added yet.\");\n          return;\n        }\n        series.store\n          .filter(serie => serie.category === \"Ma Liste\")[0]\n          .seriesImageUrl.splice(myList.seriesImageUrl.findIndex(s => s === source), 1);\n        series.store\n          .filter(serie => serie.category === \"Ma Liste\")[0]\n          .seriesName.splice(myList.seriesImageUrl.findIndex(a => a === alt), 1);\n      }\n      \n      return series;\n    };\n\n    const newState = addToMyList();\n\n    setSeries((state) => {\n      return Object.assign({}, state, newState);\n    });\n  };\n\n  const rows = series.store.map((serie, i) => {\n    const s = serie.seriesImageUrl.map((x, y) => {\n      return <TvShow key={y + Math.random() * (Math.random() * 5)} onClick={handleAddToList} url={x} title={serie.seriesName[y]} />\n    })\n    return <TvShowRow key={i + Math.random() * (Math.random() * 5)} category={serie.category}>\n      {s}\n    </TvShowRow>\n  });\n\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Container fluid >\n        {rows}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}